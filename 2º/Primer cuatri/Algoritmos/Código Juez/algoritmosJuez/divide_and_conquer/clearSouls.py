
def busqueda_Souls(lista, objetivo):

    inicio = 0
    fin = len(lista)-1
    ultima_valida = -1

    while inicio <= fin:
        medio = (inicio+fin)//2
        if lista[medio] <= objetivo:
            ultima_valida = medio
            inicio = medio + 1
        else:
            fin = medio - 1

    return ultima_valida

def clearSouls(niveles, nivel_caballero):
    lista_acumulada = [0] * len(niveles)
    for i in range(len(niveles)):
        lista_acumulada[i] = lista_acumulada[i-1] + niveles[i]

    casos = []

    for i in range(len(nivel_caballero)):
        nivel_actual = nivel_caballero[i]
        posicion = busqueda_Souls(niveles, nivel_actual)
        if posicion != -1:
            num_enemigos = posicion + 1
            puntos = lista_acumulada[num_enemigos-1] # Sumamos hasta el nÃºmero de enemigos que podemos cargarnos
            casos.append(f"{num_enemigos} {puntos}")
        else:
            casos.append(f"{0} {0}")

    return casos


if __name__ == "__main__":
    N = int(input())
    niveles = list(map(int, input().strip().split()))
    M = int(input())
    nivel_caballero = []
    for i in range(M):
        Q = int(input())
        nivel_caballero.append(Q)

    casos = clearSouls(niveles, nivel_caballero)

    for caso in casos:
        print(caso)


'''
7
1 2 3 4 5 6 7
3
3
10
2
'''
'''
901

32
3570
3565
4337
6347
642
8027
3415
2227
253
8584
8566
523
2496
2420
2999
6154
6338
7817
3718
8073
2194
2703
238
3336
3261
8075
7276
1011
5231
5949
4341
6594
'''




